# Project 2: Nondeterministic Finite Automata
* Author: Rich Boundji & Ethan Raygor
* Class: CS361
* Semester: Fall 2022
## Overview
This program is a java representation of a Nondeterministic Finite Automata 
that includes a method for creating the equivalent deterministic automata. The 
given driver class demonstrates this functionality.
## Reflection
Rich: This project went well overall, the most difficult part for me was wrapping
my head around how to implement the getDFA() method. I think that I could of 
done a better job managing my time if we had set due date for some part of 
the project.
Ethan: The development process went pretty well for me overall. I probably 
wasted the most time with my first attempt of implementing the getDFA() method.
I was trying to create every possible state using the powerset which turned out
to be inneficient and troublesome due to the fact that not every state was need
or even possible to reach. By changing the method to first to a BFA to find 
possible states followed by the same BFA to add transitions I found a great 
deal more success. If I could go back in time I would definitely tell myself to
change my approach from the get go.
## Compiling and Using
To compile:
```
$ javac ./fa/*.java
$ javac ./fa/dfa/*.java
$ javac ./fa/nfa/*.java
```
To run:
```
$ java ./fa/nfa/NFADriver [test case in correct .txt format]
```
## Sources used
https://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html
https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/
https://code.visualstudio.com/docs/editor/debugging#_launch-configurations
https://www.geeksforgeeks.org/depth-first-search-or-dfs-for-a-graph/
